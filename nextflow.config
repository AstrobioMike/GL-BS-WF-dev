/*
 * -------------------------------------------------
 *  Built generally based on the nf-core/methylseq workflow
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params
params {

    gldsAccession = 'GLDS-XYX'
    bismark_index = true
    genome = './ref-fasta/tiny-ref-fasta.fa'
    input_reads_dir = './tiny-reads/'
    single_end = true
    rrbs = false



    /* **** TrimGalore settings regarding the library preparating method ****
    * SITUATION 1
    *     If not RRBS, or if RRBS using Msel digestion, this should be set to: lib_type = 1
    * SITUATION 2
    *     If RRBS with Mspl digestion, this should be set to: lib_type = 2
    * SITUATION 3
    *     If RRBS with NuGEN ovation kit, this should be set to: lib_type = 3
    */

    lib_type = 1




    /* **** Alignment settings regarding the library preparating method **** */
    non_directional = false

    /* **** Output directories **** */
    multiqc_outputs_dir = 'MultiQC_Outputs/'
    filtered_reads_dir = 'Filtered_Sequence_Data/'
    bismark_index_dir = 'Bismark_Index/'
    bismark_alignments_dir = 'Bismark_Alignments/'
    bismark_methylation_calls_dir = 'Bismark_Methylation_Calls/'
    bismark_summary_dir = 'Bismark_Summary/'

    /* **** Thread/cpu settings for parallel options **** */
    bismark_index_creation_threads = 2 // this one will be doubled, see bismark_genome_preparation docs
    bismark_align_threads = 2 // this one will be doubled for operating on both strands, see bismark docs

    // these likely should not be changed
    accepted_lib_types = [1, 2, 3]


    help = false

}

// setting environmental variables
env {

    // setting colors to use
    GREEN = '\033[0;32m'
    YELLOW = '\033[0;33m'
    RED = '\033[0;31m'
    NC = '\033[0m'

    // Export these variables to prevent local Python/R libraries from conflicting with those in the container
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
    
}

/* **** Capture exit codes from upstream processes when piping **** */
process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

manifest {
    homePage = 'https://github.com/AstrobioMike/GL-BS-WF-dev'
    description = 'Methyl-seq Workflow for Document GL-DPPD-XXXX'
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '>=22.04.0'
    version = '1.0.0'
}

// mamba
conda.useMamba = true

// // Adapted from : https://github.com/nf-core/rnaseq/blob/master/nextflow.config
// def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
// timeline {
//     enabled = true
//     file    = "${params.gldsAccession}/Resource_Usage/execution_timeline_${trace_timestamp}.html"
// }
// report {
//     enabled = true
//     file    = "${params.gldsAccession}/Resource_Usage/execution_report_${trace_timestamp}.html"
// }
// trace {
//     enabled = true
//     file    = "${params.gldsAccession}/Resource_Usage/execution_trace_${trace_timestamp}.txt"
// }
// dag {
//     enabled = false // TODO: DISCUSS, setting up nextflow env with graphviz to output the svg diagram
//     file    = "${params.gldsAccession}/Resource_Usage/pipeline_dag_${trace_timestamp}.svg"
// }


profiles {

//    slurm {
//        includeConfig 'config/executor/default_slurm.config'
//    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        // Address issue: https://github.com/nextflow-io/nextflow/issues/1210
        process {
            errorStrategy = { 
            task.exitStatus == 255 ? 'retry' : 'terminate' 
            }
        }
        includeConfig 'config/software/docker-images.config'
    }

    docker {
        singularity.enabled    = false
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        docker.userEmulation   = true
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        process {
          errorStrategy = { 
            [125,127].contains(task.exitStatus) ? 'retry' : 'terminate' 
            }
        }
        includeConfig 'config/software/docker-images.config'
    }

    conda {

        useMamba = true
        includeConfig 'config/software/conda-envs.config'

    }

    local {

        includeConfig 'config/software/local-conda-envs.config'

    }

}
